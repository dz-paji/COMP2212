-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.11 from TileGrammar.y
-----------------------------------------------------------------------------

state 69 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCalc -> Exp                            (0)
	Exp -> CREATECANVAS var ExpCalc                    (1)
	Exp -> LOAD var                                    (2)
	Exp -> REVERSE var                                 (3)
	Exp -> ROTATE var ExpCalc                          (4)
	Exp -> BLANK var                                   (5)
	Exp -> SCALE var ExpCalc                           (6)
	Exp -> PRINT var ExpCalc ExpCalc                   (7)
	Exp -> OUTFILE var                                 (8)
	Exp -> SUBTITLE var var                            (9)
	Exp -> let var '=' ExpCalc                         (10)
	Exp -> if ExpBool then Exp else Exp                (11)
	Exp -> while ExpBool do Exp                        (12)
	Exp -> Exp ';' Exp                                 (13)
	Exp -> Exp ';'                                     (14)
	ExpCalc -> ExpCalc '^' ExpCalc                     (15)
	ExpCalc -> ExpCalc '*' ExpCalc                     (16)
	ExpCalc -> ExpCalc '/' ExpCalc                     (17)
	ExpCalc -> ExpCalc '+' ExpCalc                     (18)
	ExpCalc -> ExpCalc '-' ExpCalc                     (19)
	ExpCalc -> int                                     (20)
	ExpCalc -> var                                     (21)
	ExpCalc -> '(' ExpCalc ')'                         (22)
	ExpBool -> ExpBool '&&' ExpBool                    (23)
	ExpBool -> ExpBool '||' ExpBool                    (24)
	ExpBool -> '!!' ExpBool                            (25)
	ExpBool -> ExpCalc '<' ExpCalc                     (26)
	ExpBool -> ExpCalc '<' '=' ExpCalc                 (27)
	ExpBool -> ExpCalc '>' ExpCalc                     (28)
	ExpBool -> ExpCalc '>' '=' ExpCalc                 (29)
	ExpBool -> ExpCalc '==' ExpCalc                    (30)
	ExpBool -> true                                    (31)
	ExpBool -> false                                   (32)
	ExpBool -> '(' ExpBool ')'                         (33)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TokenInt _ $$ }
	var            { TokenVar _ $$ }
	true           { TokenTrue _ }
	false          { TokenFalse _ }
	if             { TokenIf _ }
	then           { TokenThen _ }
	else           { TokenElse _ }
	let            { TokenLet _ }
	while          { TokenWhile _ }
	do             { TokenDo _ }
	REVERSE        { TokenReverse _ }
	ROTATE         { TokenRotate _ }
	BLANK          { TokenBlank _ }
	LOAD           { TokenLoad _ }
	SCALE          { TokenScale _ }
	PRINT          { TokenPrint _ }
	CREATECANVAS   { TokenCreateCanvas _ }
	OUTFILE        { TokenOutFile _ }
	SUBTITLE       { TokenSubtitle _ }
	'&&'           { TokenAnd _ }
	'||'           { TokenOr _ }
	'!!'           { TokenNegation _ }
	'<'            { TokenLess _ }
	'>'            { TokenGreater _ }
	'=='           { TokenEq _ }
	'='            { TokenAssign _ }
	'+'            { TokenPlus _ }
	'-'            { TokenMinus _ }
	'*'            { TokenTimes _ }
	'/'            { TokenDiv _ }
	'^'            { TokenExp _ }
	';'            { TokenStatSep _ }
	'('            { TokenLeftParen _ }
	')'            { TokenRightParen _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCalc rule  0
	Exp             rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14
	ExpCalc         rules 15, 16, 17, 18, 19, 20, 21, 22
	ExpBool         rules 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	if             shift, and enter state 4
	let            shift, and enter state 5
	while          shift, and enter state 6
	REVERSE        shift, and enter state 7
	ROTATE         shift, and enter state 8
	BLANK          shift, and enter state 9
	LOAD           shift, and enter state 10
	SCALE          shift, and enter state 11
	PRINT          shift, and enter state 12
	CREATECANVAS   shift, and enter state 2
	OUTFILE        shift, and enter state 13
	SUBTITLE       shift, and enter state 14

	Exp            goto state 3

State 1


	CREATECANVAS   shift, and enter state 2


State 2

	Exp -> CREATECANVAS . var ExpCalc                   (rule 1)

	var            shift, and enter state 34


State 3

	%start_parseCalc -> Exp .                           (rule 0)
	Exp -> Exp . ';' Exp                                (rule 13)
	Exp -> Exp . ';'                                    (rule 14)

	';'            shift, and enter state 33
	%eof           accept


State 4

	Exp -> if . ExpBool then Exp else Exp               (rule 11)

	int            shift, and enter state 25
	var            shift, and enter state 26
	true           shift, and enter state 27
	false          shift, and enter state 28
	'!!'           shift, and enter state 29
	'('            shift, and enter state 30

	ExpCalc        goto state 23
	ExpBool        goto state 32

State 5

	Exp -> let . var '=' ExpCalc                        (rule 10)

	var            shift, and enter state 31


State 6

	Exp -> while . ExpBool do Exp                       (rule 12)

	int            shift, and enter state 25
	var            shift, and enter state 26
	true           shift, and enter state 27
	false          shift, and enter state 28
	'!!'           shift, and enter state 29
	'('            shift, and enter state 30

	ExpCalc        goto state 23
	ExpBool        goto state 24

State 7

	Exp -> REVERSE . var                                (rule 3)

	var            shift, and enter state 22


State 8

	Exp -> ROTATE . var ExpCalc                         (rule 4)

	var            shift, and enter state 21


State 9

	Exp -> BLANK . var                                  (rule 5)

	var            shift, and enter state 20


State 10

	Exp -> LOAD . var                                   (rule 2)

	var            shift, and enter state 19


State 11

	Exp -> SCALE . var ExpCalc                          (rule 6)

	var            shift, and enter state 18


State 12

	Exp -> PRINT . var ExpCalc ExpCalc                  (rule 7)

	var            shift, and enter state 17


State 13

	Exp -> OUTFILE . var                                (rule 8)

	var            shift, and enter state 16


State 14

	Exp -> SUBTITLE . var var                           (rule 9)

	var            shift, and enter state 15


State 15

	Exp -> SUBTITLE var . var                           (rule 9)

	var            shift, and enter state 57


State 16

	Exp -> OUTFILE var .                                (rule 8)

	else           reduce using rule 8
	';'            reduce using rule 8
	%eof           reduce using rule 8


State 17

	Exp -> PRINT var . ExpCalc ExpCalc                  (rule 7)

	int            shift, and enter state 25
	var            shift, and enter state 26
	'('            shift, and enter state 36

	ExpCalc        goto state 56

State 18

	Exp -> SCALE var . ExpCalc                          (rule 6)

	int            shift, and enter state 25
	var            shift, and enter state 26
	'('            shift, and enter state 36

	ExpCalc        goto state 55

State 19

	Exp -> LOAD var .                                   (rule 2)

	else           reduce using rule 2
	';'            reduce using rule 2
	%eof           reduce using rule 2


State 20

	Exp -> BLANK var .                                  (rule 5)

	else           reduce using rule 5
	';'            reduce using rule 5
	%eof           reduce using rule 5


State 21

	Exp -> ROTATE var . ExpCalc                         (rule 4)

	int            shift, and enter state 25
	var            shift, and enter state 26
	'('            shift, and enter state 36

	ExpCalc        goto state 54

State 22

	Exp -> REVERSE var .                                (rule 3)

	else           reduce using rule 3
	';'            reduce using rule 3
	%eof           reduce using rule 3


State 23

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 16)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 17)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 18)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 19)
	ExpBool -> ExpCalc . '<' ExpCalc                    (rule 26)
	ExpBool -> ExpCalc . '<' '=' ExpCalc                (rule 27)
	ExpBool -> ExpCalc . '>' ExpCalc                    (rule 28)
	ExpBool -> ExpCalc . '>' '=' ExpCalc                (rule 29)
	ExpBool -> ExpCalc . '==' ExpCalc                   (rule 30)

	'<'            shift, and enter state 46
	'>'            shift, and enter state 47
	'=='           shift, and enter state 48
	'+'            shift, and enter state 49
	'-'            shift, and enter state 50
	'*'            shift, and enter state 51
	'/'            shift, and enter state 52
	'^'            shift, and enter state 53


State 24

	Exp -> while ExpBool . do Exp                       (rule 12)
	ExpBool -> ExpBool . '&&' ExpBool                   (rule 23)
	ExpBool -> ExpBool . '||' ExpBool                   (rule 24)

	do             shift, and enter state 45
	'&&'           shift, and enter state 39
	'||'           shift, and enter state 40


State 25

	ExpCalc -> int .                                    (rule 20)

	int            reduce using rule 20
	var            reduce using rule 20
	then           reduce using rule 20
	else           reduce using rule 20
	do             reduce using rule 20
	'&&'           reduce using rule 20
	'||'           reduce using rule 20
	'<'            reduce using rule 20
	'>'            reduce using rule 20
	'=='           reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            reduce using rule 20
	'/'            reduce using rule 20
	'^'            reduce using rule 20
	';'            reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	%eof           reduce using rule 20


State 26

	ExpCalc -> var .                                    (rule 21)

	int            reduce using rule 21
	var            reduce using rule 21
	then           reduce using rule 21
	else           reduce using rule 21
	do             reduce using rule 21
	'&&'           reduce using rule 21
	'||'           reduce using rule 21
	'<'            reduce using rule 21
	'>'            reduce using rule 21
	'=='           reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	'/'            reduce using rule 21
	'^'            reduce using rule 21
	';'            reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21
	%eof           reduce using rule 21


State 27

	ExpBool -> true .                                   (rule 31)

	then           reduce using rule 31
	do             reduce using rule 31
	'&&'           reduce using rule 31
	'||'           reduce using rule 31
	')'            reduce using rule 31


State 28

	ExpBool -> false .                                  (rule 32)

	then           reduce using rule 32
	do             reduce using rule 32
	'&&'           reduce using rule 32
	'||'           reduce using rule 32
	')'            reduce using rule 32


State 29

	ExpBool -> '!!' . ExpBool                           (rule 25)

	int            shift, and enter state 25
	var            shift, and enter state 26
	true           shift, and enter state 27
	false          shift, and enter state 28
	'!!'           shift, and enter state 29
	'('            shift, and enter state 30

	ExpCalc        goto state 23
	ExpBool        goto state 44

State 30

	ExpCalc -> '(' . ExpCalc ')'                        (rule 22)
	ExpBool -> '(' . ExpBool ')'                        (rule 33)

	int            shift, and enter state 25
	var            shift, and enter state 26
	true           shift, and enter state 27
	false          shift, and enter state 28
	'!!'           shift, and enter state 29
	'('            shift, and enter state 30

	ExpCalc        goto state 42
	ExpBool        goto state 43

State 31

	Exp -> let var . '=' ExpCalc                        (rule 10)

	'='            shift, and enter state 41


State 32

	Exp -> if ExpBool . then Exp else Exp               (rule 11)
	ExpBool -> ExpBool . '&&' ExpBool                   (rule 23)
	ExpBool -> ExpBool . '||' ExpBool                   (rule 24)

	then           shift, and enter state 38
	'&&'           shift, and enter state 39
	'||'           shift, and enter state 40


State 33

	Exp -> Exp ';' . Exp                                (rule 13)
	Exp -> Exp ';' .                                    (rule 14)

	if             shift, and enter state 4
	else           reduce using rule 14
	let            shift, and enter state 5
	while          shift, and enter state 6
	REVERSE        shift, and enter state 7
	ROTATE         shift, and enter state 8
	BLANK          shift, and enter state 9
	LOAD           shift, and enter state 10
	SCALE          shift, and enter state 11
	PRINT          shift, and enter state 12
	CREATECANVAS   shift, and enter state 2
	OUTFILE        shift, and enter state 13
	SUBTITLE       shift, and enter state 14
	';'            reduce using rule 14
	%eof           reduce using rule 14

	Exp            goto state 37

State 34

	Exp -> CREATECANVAS var . ExpCalc                   (rule 1)

	int            shift, and enter state 25
	var            shift, and enter state 26
	'('            shift, and enter state 36

	ExpCalc        goto state 35

State 35

	Exp -> CREATECANVAS var ExpCalc .                   (rule 1)
	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 16)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 17)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 18)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 19)

	else           reduce using rule 1
	'+'            shift, and enter state 49
	'-'            shift, and enter state 50
	'*'            shift, and enter state 51
	'/'            shift, and enter state 52
	'^'            shift, and enter state 53
	';'            reduce using rule 1
	%eof           reduce using rule 1


State 36

	ExpCalc -> '(' . ExpCalc ')'                        (rule 22)

	int            shift, and enter state 25
	var            shift, and enter state 26
	'('            shift, and enter state 36

	ExpCalc        goto state 76

State 37

	Exp -> Exp . ';' Exp                                (rule 13)
	Exp -> Exp ';' Exp .                                (rule 13)
	Exp -> Exp . ';'                                    (rule 14)

	else           reduce using rule 13
	';'            reduce using rule 13
	%eof           reduce using rule 13


State 38

	Exp -> if ExpBool then . Exp else Exp               (rule 11)

	if             shift, and enter state 4
	let            shift, and enter state 5
	while          shift, and enter state 6
	REVERSE        shift, and enter state 7
	ROTATE         shift, and enter state 8
	BLANK          shift, and enter state 9
	LOAD           shift, and enter state 10
	SCALE          shift, and enter state 11
	PRINT          shift, and enter state 12
	CREATECANVAS   shift, and enter state 2
	OUTFILE        shift, and enter state 13
	SUBTITLE       shift, and enter state 14

	Exp            goto state 75

State 39

	ExpBool -> ExpBool '&&' . ExpBool                   (rule 23)

	int            shift, and enter state 25
	var            shift, and enter state 26
	true           shift, and enter state 27
	false          shift, and enter state 28
	'!!'           shift, and enter state 29
	'('            shift, and enter state 30

	ExpCalc        goto state 23
	ExpBool        goto state 74

State 40

	ExpBool -> ExpBool '||' . ExpBool                   (rule 24)

	int            shift, and enter state 25
	var            shift, and enter state 26
	true           shift, and enter state 27
	false          shift, and enter state 28
	'!!'           shift, and enter state 29
	'('            shift, and enter state 30

	ExpCalc        goto state 23
	ExpBool        goto state 73

State 41

	Exp -> let var '=' . ExpCalc                        (rule 10)

	int            shift, and enter state 25
	var            shift, and enter state 26
	'('            shift, and enter state 36

	ExpCalc        goto state 72

State 42

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 16)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 17)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 18)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 19)
	ExpCalc -> '(' ExpCalc . ')'                        (rule 22)
	ExpBool -> ExpCalc . '<' ExpCalc                    (rule 26)
	ExpBool -> ExpCalc . '<' '=' ExpCalc                (rule 27)
	ExpBool -> ExpCalc . '>' ExpCalc                    (rule 28)
	ExpBool -> ExpCalc . '>' '=' ExpCalc                (rule 29)
	ExpBool -> ExpCalc . '==' ExpCalc                   (rule 30)

	'<'            shift, and enter state 46
	'>'            shift, and enter state 47
	'=='           shift, and enter state 48
	'+'            shift, and enter state 49
	'-'            shift, and enter state 50
	'*'            shift, and enter state 51
	'/'            shift, and enter state 52
	'^'            shift, and enter state 53
	')'            shift, and enter state 71


State 43

	ExpBool -> ExpBool . '&&' ExpBool                   (rule 23)
	ExpBool -> ExpBool . '||' ExpBool                   (rule 24)
	ExpBool -> '(' ExpBool . ')'                        (rule 33)

	'&&'           shift, and enter state 39
	'||'           shift, and enter state 40
	')'            shift, and enter state 70


State 44

	ExpBool -> ExpBool . '&&' ExpBool                   (rule 23)
	ExpBool -> ExpBool . '||' ExpBool                   (rule 24)
	ExpBool -> '!!' ExpBool .                           (rule 25)

	then           reduce using rule 25
	do             reduce using rule 25
	'&&'           shift, and enter state 39
	'||'           shift, and enter state 40
	')'            reduce using rule 25


State 45

	Exp -> while ExpBool do . Exp                       (rule 12)

	if             shift, and enter state 4
	let            shift, and enter state 5
	while          shift, and enter state 6
	REVERSE        shift, and enter state 7
	ROTATE         shift, and enter state 8
	BLANK          shift, and enter state 9
	LOAD           shift, and enter state 10
	SCALE          shift, and enter state 11
	PRINT          shift, and enter state 12
	CREATECANVAS   shift, and enter state 2
	OUTFILE        shift, and enter state 13
	SUBTITLE       shift, and enter state 14

	Exp            goto state 69

State 46

	ExpBool -> ExpCalc '<' . ExpCalc                    (rule 26)
	ExpBool -> ExpCalc '<' . '=' ExpCalc                (rule 27)

	int            shift, and enter state 25
	var            shift, and enter state 26
	'='            shift, and enter state 68
	'('            shift, and enter state 36

	ExpCalc        goto state 67

State 47

	ExpBool -> ExpCalc '>' . ExpCalc                    (rule 28)
	ExpBool -> ExpCalc '>' . '=' ExpCalc                (rule 29)

	int            shift, and enter state 25
	var            shift, and enter state 26
	'='            shift, and enter state 66
	'('            shift, and enter state 36

	ExpCalc        goto state 65

State 48

	ExpBool -> ExpCalc '==' . ExpCalc                   (rule 30)

	int            shift, and enter state 25
	var            shift, and enter state 26
	'('            shift, and enter state 36

	ExpCalc        goto state 64

State 49

	ExpCalc -> ExpCalc '+' . ExpCalc                    (rule 18)

	int            shift, and enter state 25
	var            shift, and enter state 26
	'('            shift, and enter state 36

	ExpCalc        goto state 63

State 50

	ExpCalc -> ExpCalc '-' . ExpCalc                    (rule 19)

	int            shift, and enter state 25
	var            shift, and enter state 26
	'('            shift, and enter state 36

	ExpCalc        goto state 62

State 51

	ExpCalc -> ExpCalc '*' . ExpCalc                    (rule 16)

	int            shift, and enter state 25
	var            shift, and enter state 26
	'('            shift, and enter state 36

	ExpCalc        goto state 61

State 52

	ExpCalc -> ExpCalc '/' . ExpCalc                    (rule 17)

	int            shift, and enter state 25
	var            shift, and enter state 26
	'('            shift, and enter state 36

	ExpCalc        goto state 60

State 53

	ExpCalc -> ExpCalc '^' . ExpCalc                    (rule 15)

	int            shift, and enter state 25
	var            shift, and enter state 26
	'('            shift, and enter state 36

	ExpCalc        goto state 59

State 54

	Exp -> ROTATE var ExpCalc .                         (rule 4)
	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 16)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 17)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 18)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 19)

	else           reduce using rule 4
	'+'            shift, and enter state 49
	'-'            shift, and enter state 50
	'*'            shift, and enter state 51
	'/'            shift, and enter state 52
	'^'            shift, and enter state 53
	';'            reduce using rule 4
	%eof           reduce using rule 4


State 55

	Exp -> SCALE var ExpCalc .                          (rule 6)
	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 16)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 17)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 18)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 19)

	else           reduce using rule 6
	'+'            shift, and enter state 49
	'-'            shift, and enter state 50
	'*'            shift, and enter state 51
	'/'            shift, and enter state 52
	'^'            shift, and enter state 53
	';'            reduce using rule 6
	%eof           reduce using rule 6


State 56

	Exp -> PRINT var ExpCalc . ExpCalc                  (rule 7)
	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 16)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 17)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 18)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 19)

	int            shift, and enter state 25
	var            shift, and enter state 26
	'+'            shift, and enter state 49
	'-'            shift, and enter state 50
	'*'            shift, and enter state 51
	'/'            shift, and enter state 52
	'^'            shift, and enter state 53
	'('            shift, and enter state 36

	ExpCalc        goto state 58

State 57

	Exp -> SUBTITLE var var .                           (rule 9)

	else           reduce using rule 9
	';'            reduce using rule 9
	%eof           reduce using rule 9


State 58

	Exp -> PRINT var ExpCalc ExpCalc .                  (rule 7)
	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 16)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 17)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 18)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 19)

	else           reduce using rule 7
	'+'            shift, and enter state 49
	'-'            shift, and enter state 50
	'*'            shift, and enter state 51
	'/'            shift, and enter state 52
	'^'            shift, and enter state 53
	';'            reduce using rule 7
	%eof           reduce using rule 7


State 59

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc '^' ExpCalc .                    (rule 15)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 16)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 17)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 18)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 19)

	int            reduce using rule 15
	var            reduce using rule 15
	then           reduce using rule 15
	else           reduce using rule 15
	do             reduce using rule 15
	'&&'           reduce using rule 15
	'||'           reduce using rule 15
	'<'            reduce using rule 15
	'>'            reduce using rule 15
	'=='           reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	'/'            reduce using rule 15
	'^'            reduce using rule 15
	';'            reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	%eof           reduce using rule 15


State 60

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 16)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 17)
	ExpCalc -> ExpCalc '/' ExpCalc .                    (rule 17)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 18)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 19)

	int            reduce using rule 17
	var            reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	do             reduce using rule 17
	'&&'           reduce using rule 17
	'||'           reduce using rule 17
	'<'            reduce using rule 17
	'>'            reduce using rule 17
	'=='           reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	'^'            reduce using rule 17
	';'            reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	%eof           reduce using rule 17


State 61

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 16)
	ExpCalc -> ExpCalc '*' ExpCalc .                    (rule 16)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 17)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 18)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 19)

	int            reduce using rule 16
	var            reduce using rule 16
	then           reduce using rule 16
	else           reduce using rule 16
	do             reduce using rule 16
	'&&'           reduce using rule 16
	'||'           reduce using rule 16
	'<'            reduce using rule 16
	'>'            reduce using rule 16
	'=='           reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	'/'            reduce using rule 16
	'^'            reduce using rule 16
	';'            reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	%eof           reduce using rule 16


State 62

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 16)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 17)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 18)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 19)
	ExpCalc -> ExpCalc '-' ExpCalc .                    (rule 19)

	int            reduce using rule 19
	var            reduce using rule 19
	then           reduce using rule 19
	else           reduce using rule 19
	do             reduce using rule 19
	'&&'           reduce using rule 19
	'||'           reduce using rule 19
	'<'            reduce using rule 19
	'>'            reduce using rule 19
	'=='           reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            shift, and enter state 51
	'/'            shift, and enter state 52
	'^'            shift, and enter state 53
	';'            reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	%eof           reduce using rule 19


State 63

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 16)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 17)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 18)
	ExpCalc -> ExpCalc '+' ExpCalc .                    (rule 18)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 19)

	int            reduce using rule 18
	var            reduce using rule 18
	then           reduce using rule 18
	else           reduce using rule 18
	do             reduce using rule 18
	'&&'           reduce using rule 18
	'||'           reduce using rule 18
	'<'            reduce using rule 18
	'>'            reduce using rule 18
	'=='           reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            shift, and enter state 51
	'/'            shift, and enter state 52
	'^'            shift, and enter state 53
	';'            reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	%eof           reduce using rule 18


State 64

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 16)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 17)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 18)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 19)
	ExpBool -> ExpCalc '==' ExpCalc .                   (rule 30)

	then           reduce using rule 30
	do             reduce using rule 30
	'&&'           reduce using rule 30
	'||'           reduce using rule 30
	'+'            shift, and enter state 49
	'-'            shift, and enter state 50
	'*'            shift, and enter state 51
	'/'            shift, and enter state 52
	'^'            shift, and enter state 53
	')'            reduce using rule 30


State 65

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 16)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 17)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 18)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 19)
	ExpBool -> ExpCalc '>' ExpCalc .                    (rule 28)

	then           reduce using rule 28
	do             reduce using rule 28
	'&&'           reduce using rule 28
	'||'           reduce using rule 28
	'+'            shift, and enter state 49
	'-'            shift, and enter state 50
	'*'            shift, and enter state 51
	'/'            shift, and enter state 52
	'^'            shift, and enter state 53
	')'            reduce using rule 28


State 66

	ExpBool -> ExpCalc '>' '=' . ExpCalc                (rule 29)

	int            shift, and enter state 25
	var            shift, and enter state 26
	'('            shift, and enter state 36

	ExpCalc        goto state 79

State 67

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 16)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 17)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 18)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 19)
	ExpBool -> ExpCalc '<' ExpCalc .                    (rule 26)

	then           reduce using rule 26
	do             reduce using rule 26
	'&&'           reduce using rule 26
	'||'           reduce using rule 26
	'+'            shift, and enter state 49
	'-'            shift, and enter state 50
	'*'            shift, and enter state 51
	'/'            shift, and enter state 52
	'^'            shift, and enter state 53
	')'            reduce using rule 26


State 68

	ExpBool -> ExpCalc '<' '=' . ExpCalc                (rule 27)

	int            shift, and enter state 25
	var            shift, and enter state 26
	'('            shift, and enter state 36

	ExpCalc        goto state 78

State 69

	Exp -> while ExpBool do Exp .                       (rule 12)
	Exp -> Exp . ';' Exp                                (rule 13)
	Exp -> Exp . ';'                                    (rule 14)

	else           reduce using rule 12
	';'            shift, and enter state 33
			(reduce using rule 12)

	%eof           reduce using rule 12


State 70

	ExpBool -> '(' ExpBool ')' .                        (rule 33)

	then           reduce using rule 33
	do             reduce using rule 33
	'&&'           reduce using rule 33
	'||'           reduce using rule 33
	')'            reduce using rule 33


State 71

	ExpCalc -> '(' ExpCalc ')' .                        (rule 22)

	int            reduce using rule 22
	var            reduce using rule 22
	then           reduce using rule 22
	else           reduce using rule 22
	do             reduce using rule 22
	'&&'           reduce using rule 22
	'||'           reduce using rule 22
	'<'            reduce using rule 22
	'>'            reduce using rule 22
	'=='           reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            reduce using rule 22
	'/'            reduce using rule 22
	'^'            reduce using rule 22
	';'            reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	%eof           reduce using rule 22


State 72

	Exp -> let var '=' ExpCalc .                        (rule 10)
	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 16)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 17)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 18)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 19)

	else           reduce using rule 10
	'+'            shift, and enter state 49
	'-'            shift, and enter state 50
	'*'            shift, and enter state 51
	'/'            shift, and enter state 52
	'^'            shift, and enter state 53
	';'            reduce using rule 10
	%eof           reduce using rule 10


State 73

	ExpBool -> ExpBool . '&&' ExpBool                   (rule 23)
	ExpBool -> ExpBool . '||' ExpBool                   (rule 24)
	ExpBool -> ExpBool '||' ExpBool .                   (rule 24)

	then           reduce using rule 24
	do             reduce using rule 24
	'&&'           reduce using rule 24
	'||'           reduce using rule 24
	')'            reduce using rule 24


State 74

	ExpBool -> ExpBool . '&&' ExpBool                   (rule 23)
	ExpBool -> ExpBool '&&' ExpBool .                   (rule 23)
	ExpBool -> ExpBool . '||' ExpBool                   (rule 24)

	then           reduce using rule 23
	do             reduce using rule 23
	'&&'           reduce using rule 23
	'||'           reduce using rule 23
	')'            reduce using rule 23


State 75

	Exp -> if ExpBool then Exp . else Exp               (rule 11)
	Exp -> Exp . ';' Exp                                (rule 13)
	Exp -> Exp . ';'                                    (rule 14)

	else           shift, and enter state 77
	';'            shift, and enter state 33


State 76

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 16)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 17)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 18)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 19)
	ExpCalc -> '(' ExpCalc . ')'                        (rule 22)

	'+'            shift, and enter state 49
	'-'            shift, and enter state 50
	'*'            shift, and enter state 51
	'/'            shift, and enter state 52
	'^'            shift, and enter state 53
	')'            shift, and enter state 71


State 77

	Exp -> if ExpBool then Exp else . Exp               (rule 11)

	if             shift, and enter state 4
	let            shift, and enter state 5
	while          shift, and enter state 6
	REVERSE        shift, and enter state 7
	ROTATE         shift, and enter state 8
	BLANK          shift, and enter state 9
	LOAD           shift, and enter state 10
	SCALE          shift, and enter state 11
	PRINT          shift, and enter state 12
	CREATECANVAS   shift, and enter state 2
	OUTFILE        shift, and enter state 13
	SUBTITLE       shift, and enter state 14

	Exp            goto state 80

State 78

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 16)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 17)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 18)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 19)
	ExpBool -> ExpCalc '<' '=' ExpCalc .                (rule 27)

	then           reduce using rule 27
	do             reduce using rule 27
	'&&'           reduce using rule 27
	'||'           reduce using rule 27
	'+'            shift, and enter state 49
	'-'            shift, and enter state 50
	'*'            shift, and enter state 51
	'/'            shift, and enter state 52
	'^'            shift, and enter state 53
	')'            reduce using rule 27


State 79

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 16)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 17)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 18)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 19)
	ExpBool -> ExpCalc '>' '=' ExpCalc .                (rule 29)

	then           reduce using rule 29
	do             reduce using rule 29
	'&&'           reduce using rule 29
	'||'           reduce using rule 29
	'+'            shift, and enter state 49
	'-'            shift, and enter state 50
	'*'            shift, and enter state 51
	'/'            shift, and enter state 52
	'^'            shift, and enter state 53
	')'            reduce using rule 29


State 80

	Exp -> if ExpBool then Exp else Exp .               (rule 11)
	Exp -> Exp . ';' Exp                                (rule 13)
	Exp -> Exp . ';'                                    (rule 14)

	else           reduce using rule 11
	';'            shift, and enter state 33
	%eof           reduce using rule 11


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 34
Number of terminals: 34
Number of non-terminals: 4
Number of states: 81
