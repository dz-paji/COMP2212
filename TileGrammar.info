-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.11 from TileGrammar.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCalc -> Exp                            (0)
	Exp -> CREATECANVAS var ExpCalc                    (1)
	Exp -> LOAD var                                    (2)
	Exp -> REVERSE var                                 (3)
	Exp -> ROTATE var ExpCalc                          (4)
	Exp -> BLANK var                                   (5)
	Exp -> SCALE var ExpCalc                           (6)
	Exp -> PRINT var                                   (7)
	Exp -> SUBTITLE var var                            (8)
	Exp -> let var '=' ExpCalc                         (9)
	Exp -> Exp ';' Exp                                 (10)
	Exp -> if ExpBool then Exp else Exp                (11)
	ExpCalc -> ExpCalc '^' ExpCalc                     (12)
	ExpCalc -> ExpCalc '*' ExpCalc                     (13)
	ExpCalc -> ExpCalc '/' ExpCalc                     (14)
	ExpCalc -> ExpCalc '+' ExpCalc                     (15)
	ExpCalc -> ExpCalc '-' ExpCalc                     (16)
	ExpCalc -> int                                     (17)
	ExpCalc -> var                                     (18)
	ExpCalc -> '(' ExpCalc ')'                         (19)
	ExpBool -> ExpBool '&&' ExpBool                    (20)
	ExpBool -> ExpBool '||' ExpBool                    (21)
	ExpBool -> '!!' ExpBool                            (22)
	ExpBool -> ExpCalc '<' ExpCalc                     (23)
	ExpBool -> ExpCalc '>' ExpCalc                     (24)
	ExpBool -> ExpCalc '==' ExpCalc                    (25)
	ExpBool -> true                                    (26)
	ExpBool -> false                                   (27)
	ExpBool -> '(' ExpBool ')'                         (28)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	int            { TokenInt _ $$ }
	var            { TokenVar _ $$ }
	true           { TokenTrue _ }
	false          { TokenFalse _ }
	if             { TokenIf _ }
	then           { TokenThen _ }
	else           { TokenElse _ }
	let            { TokenLet _ }
	REVERSE        { TokenReverse _ }
	ROTATE         { TokenRotate _ }
	BLANK          { TokenBlank _ }
	LOAD           { TokenLoad _ }
	SCALE          { TokenScale _ }
	PRINT          { TokenPrint _ }
	CREATECANVAS   { TokenCreateCanvas _ }
	SUBTITLE       { TokenSubtitle _ }
	'&&'           { TokenAnd _ }
	'||'           { TokenOr _ }
	'!!'           { TokenNegation _ }
	'<'            { TokenLess _ }
	'>'            { TokenGreater _ }
	'=='           { TokenEq _ }
	'='            { TokenAssign _ }
	'+'            { TokenPlus _ }
	'-'            { TokenMinus _ }
	'*'            { TokenTimes _ }
	'/'            { TokenDiv _ }
	'^'            { TokenExp _ }
	';'            { TokenStatSep _ }
	'('            { TokenLeftParen _ }
	')'            { TokenRightParen _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCalc rule  0
	Exp             rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
	ExpCalc         rules 12, 13, 14, 15, 16, 17, 18, 19
	ExpBool         rules 20, 21, 22, 23, 24, 25, 26, 27, 28

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	if             shift, and enter state 4
	let            shift, and enter state 5
	REVERSE        shift, and enter state 6
	ROTATE         shift, and enter state 7
	BLANK          shift, and enter state 8
	LOAD           shift, and enter state 9
	SCALE          shift, and enter state 10
	PRINT          shift, and enter state 11
	CREATECANVAS   shift, and enter state 2
	SUBTITLE       shift, and enter state 12

	Exp            goto state 3

State 1


	CREATECANVAS   shift, and enter state 2


State 2

	Exp -> CREATECANVAS . var ExpCalc                   (rule 1)

	var            shift, and enter state 30


State 3

	%start_parseCalc -> Exp .                           (rule 0)
	Exp -> Exp . ';' Exp                                (rule 10)

	';'            shift, and enter state 29
	%eof           accept


State 4

	Exp -> if . ExpBool then Exp else Exp               (rule 11)

	int            shift, and enter state 23
	var            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26
	'!!'           shift, and enter state 27
	'('            shift, and enter state 28

	ExpCalc        goto state 21
	ExpBool        goto state 22

State 5

	Exp -> let . var '=' ExpCalc                        (rule 9)

	var            shift, and enter state 20


State 6

	Exp -> REVERSE . var                                (rule 3)

	var            shift, and enter state 19


State 7

	Exp -> ROTATE . var ExpCalc                         (rule 4)

	var            shift, and enter state 18


State 8

	Exp -> BLANK . var                                  (rule 5)

	var            shift, and enter state 17


State 9

	Exp -> LOAD . var                                   (rule 2)

	var            shift, and enter state 16


State 10

	Exp -> SCALE . var ExpCalc                          (rule 6)

	var            shift, and enter state 15


State 11

	Exp -> PRINT . var                                  (rule 7)

	var            shift, and enter state 14


State 12

	Exp -> SUBTITLE . var var                           (rule 8)

	var            shift, and enter state 13


State 13

	Exp -> SUBTITLE var . var                           (rule 8)

	var            shift, and enter state 51


State 14

	Exp -> PRINT var .                                  (rule 7)

	else           reduce using rule 7
	';'            reduce using rule 7
	%eof           reduce using rule 7


State 15

	Exp -> SCALE var . ExpCalc                          (rule 6)

	int            shift, and enter state 23
	var            shift, and enter state 24
	'('            shift, and enter state 32

	ExpCalc        goto state 50

State 16

	Exp -> LOAD var .                                   (rule 2)

	else           reduce using rule 2
	';'            reduce using rule 2
	%eof           reduce using rule 2


State 17

	Exp -> BLANK var .                                  (rule 5)

	else           reduce using rule 5
	';'            reduce using rule 5
	%eof           reduce using rule 5


State 18

	Exp -> ROTATE var . ExpCalc                         (rule 4)

	int            shift, and enter state 23
	var            shift, and enter state 24
	'('            shift, and enter state 32

	ExpCalc        goto state 49

State 19

	Exp -> REVERSE var .                                (rule 3)

	else           reduce using rule 3
	';'            reduce using rule 3
	%eof           reduce using rule 3


State 20

	Exp -> let var . '=' ExpCalc                        (rule 9)

	'='            shift, and enter state 48


State 21

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 12)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 13)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 14)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 16)
	ExpBool -> ExpCalc . '<' ExpCalc                    (rule 23)
	ExpBool -> ExpCalc . '>' ExpCalc                    (rule 24)
	ExpBool -> ExpCalc . '==' ExpCalc                   (rule 25)

	'<'            shift, and enter state 40
	'>'            shift, and enter state 41
	'=='           shift, and enter state 42
	'+'            shift, and enter state 43
	'-'            shift, and enter state 44
	'*'            shift, and enter state 45
	'/'            shift, and enter state 46
	'^'            shift, and enter state 47


State 22

	Exp -> if ExpBool . then Exp else Exp               (rule 11)
	ExpBool -> ExpBool . '&&' ExpBool                   (rule 20)
	ExpBool -> ExpBool . '||' ExpBool                   (rule 21)

	then           shift, and enter state 37
	'&&'           shift, and enter state 38
	'||'           shift, and enter state 39


State 23

	ExpCalc -> int .                                    (rule 17)

	then           reduce using rule 17
	else           reduce using rule 17
	'&&'           reduce using rule 17
	'||'           reduce using rule 17
	'<'            reduce using rule 17
	'>'            reduce using rule 17
	'=='           reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	'^'            reduce using rule 17
	';'            reduce using rule 17
	')'            reduce using rule 17
	%eof           reduce using rule 17


State 24

	ExpCalc -> var .                                    (rule 18)

	then           reduce using rule 18
	else           reduce using rule 18
	'&&'           reduce using rule 18
	'||'           reduce using rule 18
	'<'            reduce using rule 18
	'>'            reduce using rule 18
	'=='           reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            reduce using rule 18
	'/'            reduce using rule 18
	'^'            reduce using rule 18
	';'            reduce using rule 18
	')'            reduce using rule 18
	%eof           reduce using rule 18


State 25

	ExpBool -> true .                                   (rule 26)

	then           reduce using rule 26
	'&&'           reduce using rule 26
	'||'           reduce using rule 26
	')'            reduce using rule 26


State 26

	ExpBool -> false .                                  (rule 27)

	then           reduce using rule 27
	'&&'           reduce using rule 27
	'||'           reduce using rule 27
	')'            reduce using rule 27


State 27

	ExpBool -> '!!' . ExpBool                           (rule 22)

	int            shift, and enter state 23
	var            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26
	'!!'           shift, and enter state 27
	'('            shift, and enter state 28

	ExpCalc        goto state 21
	ExpBool        goto state 36

State 28

	ExpCalc -> '(' . ExpCalc ')'                        (rule 19)
	ExpBool -> '(' . ExpBool ')'                        (rule 28)

	int            shift, and enter state 23
	var            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26
	'!!'           shift, and enter state 27
	'('            shift, and enter state 28

	ExpCalc        goto state 34
	ExpBool        goto state 35

State 29

	Exp -> Exp ';' . Exp                                (rule 10)

	if             shift, and enter state 4
	let            shift, and enter state 5
	REVERSE        shift, and enter state 6
	ROTATE         shift, and enter state 7
	BLANK          shift, and enter state 8
	LOAD           shift, and enter state 9
	SCALE          shift, and enter state 10
	PRINT          shift, and enter state 11
	CREATECANVAS   shift, and enter state 2
	SUBTITLE       shift, and enter state 12

	Exp            goto state 33

State 30

	Exp -> CREATECANVAS var . ExpCalc                   (rule 1)

	int            shift, and enter state 23
	var            shift, and enter state 24
	'('            shift, and enter state 32

	ExpCalc        goto state 31

State 31

	Exp -> CREATECANVAS var ExpCalc .                   (rule 1)
	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 12)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 13)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 14)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 16)

	else           reduce using rule 1
	'+'            shift, and enter state 43
	'-'            shift, and enter state 44
	'*'            shift, and enter state 45
	'/'            shift, and enter state 46
	'^'            shift, and enter state 47
	';'            reduce using rule 1
	%eof           reduce using rule 1


State 32

	ExpCalc -> '(' . ExpCalc ')'                        (rule 19)

	int            shift, and enter state 23
	var            shift, and enter state 24
	'('            shift, and enter state 32

	ExpCalc        goto state 66

State 33

	Exp -> Exp . ';' Exp                                (rule 10)
	Exp -> Exp ';' Exp .                                (rule 10)

	else           reduce using rule 10
	';'            reduce using rule 10
	%eof           reduce using rule 10


State 34

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 12)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 13)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 14)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 16)
	ExpCalc -> '(' ExpCalc . ')'                        (rule 19)
	ExpBool -> ExpCalc . '<' ExpCalc                    (rule 23)
	ExpBool -> ExpCalc . '>' ExpCalc                    (rule 24)
	ExpBool -> ExpCalc . '==' ExpCalc                   (rule 25)

	'<'            shift, and enter state 40
	'>'            shift, and enter state 41
	'=='           shift, and enter state 42
	'+'            shift, and enter state 43
	'-'            shift, and enter state 44
	'*'            shift, and enter state 45
	'/'            shift, and enter state 46
	'^'            shift, and enter state 47
	')'            shift, and enter state 65


State 35

	ExpBool -> ExpBool . '&&' ExpBool                   (rule 20)
	ExpBool -> ExpBool . '||' ExpBool                   (rule 21)
	ExpBool -> '(' ExpBool . ')'                        (rule 28)

	'&&'           shift, and enter state 38
	'||'           shift, and enter state 39
	')'            shift, and enter state 64


State 36

	ExpBool -> ExpBool . '&&' ExpBool                   (rule 20)
	ExpBool -> ExpBool . '||' ExpBool                   (rule 21)
	ExpBool -> '!!' ExpBool .                           (rule 22)

	then           reduce using rule 22
	'&&'           shift, and enter state 38
	'||'           shift, and enter state 39
	')'            reduce using rule 22


State 37

	Exp -> if ExpBool then . Exp else Exp               (rule 11)

	if             shift, and enter state 4
	let            shift, and enter state 5
	REVERSE        shift, and enter state 6
	ROTATE         shift, and enter state 7
	BLANK          shift, and enter state 8
	LOAD           shift, and enter state 9
	SCALE          shift, and enter state 10
	PRINT          shift, and enter state 11
	CREATECANVAS   shift, and enter state 2
	SUBTITLE       shift, and enter state 12

	Exp            goto state 63

State 38

	ExpBool -> ExpBool '&&' . ExpBool                   (rule 20)

	int            shift, and enter state 23
	var            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26
	'!!'           shift, and enter state 27
	'('            shift, and enter state 28

	ExpCalc        goto state 21
	ExpBool        goto state 62

State 39

	ExpBool -> ExpBool '||' . ExpBool                   (rule 21)

	int            shift, and enter state 23
	var            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26
	'!!'           shift, and enter state 27
	'('            shift, and enter state 28

	ExpCalc        goto state 21
	ExpBool        goto state 61

State 40

	ExpBool -> ExpCalc '<' . ExpCalc                    (rule 23)

	int            shift, and enter state 23
	var            shift, and enter state 24
	'('            shift, and enter state 32

	ExpCalc        goto state 60

State 41

	ExpBool -> ExpCalc '>' . ExpCalc                    (rule 24)

	int            shift, and enter state 23
	var            shift, and enter state 24
	'('            shift, and enter state 32

	ExpCalc        goto state 59

State 42

	ExpBool -> ExpCalc '==' . ExpCalc                   (rule 25)

	int            shift, and enter state 23
	var            shift, and enter state 24
	'('            shift, and enter state 32

	ExpCalc        goto state 58

State 43

	ExpCalc -> ExpCalc '+' . ExpCalc                    (rule 15)

	int            shift, and enter state 23
	var            shift, and enter state 24
	'('            shift, and enter state 32

	ExpCalc        goto state 57

State 44

	ExpCalc -> ExpCalc '-' . ExpCalc                    (rule 16)

	int            shift, and enter state 23
	var            shift, and enter state 24
	'('            shift, and enter state 32

	ExpCalc        goto state 56

State 45

	ExpCalc -> ExpCalc '*' . ExpCalc                    (rule 13)

	int            shift, and enter state 23
	var            shift, and enter state 24
	'('            shift, and enter state 32

	ExpCalc        goto state 55

State 46

	ExpCalc -> ExpCalc '/' . ExpCalc                    (rule 14)

	int            shift, and enter state 23
	var            shift, and enter state 24
	'('            shift, and enter state 32

	ExpCalc        goto state 54

State 47

	ExpCalc -> ExpCalc '^' . ExpCalc                    (rule 12)

	int            shift, and enter state 23
	var            shift, and enter state 24
	'('            shift, and enter state 32

	ExpCalc        goto state 53

State 48

	Exp -> let var '=' . ExpCalc                        (rule 9)

	int            shift, and enter state 23
	var            shift, and enter state 24
	'('            shift, and enter state 32

	ExpCalc        goto state 52

State 49

	Exp -> ROTATE var ExpCalc .                         (rule 4)
	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 12)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 13)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 14)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 16)

	else           reduce using rule 4
	'+'            shift, and enter state 43
	'-'            shift, and enter state 44
	'*'            shift, and enter state 45
	'/'            shift, and enter state 46
	'^'            shift, and enter state 47
	';'            reduce using rule 4
	%eof           reduce using rule 4


State 50

	Exp -> SCALE var ExpCalc .                          (rule 6)
	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 12)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 13)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 14)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 16)

	else           reduce using rule 6
	'+'            shift, and enter state 43
	'-'            shift, and enter state 44
	'*'            shift, and enter state 45
	'/'            shift, and enter state 46
	'^'            shift, and enter state 47
	';'            reduce using rule 6
	%eof           reduce using rule 6


State 51

	Exp -> SUBTITLE var var .                           (rule 8)

	else           reduce using rule 8
	';'            reduce using rule 8
	%eof           reduce using rule 8


State 52

	Exp -> let var '=' ExpCalc .                        (rule 9)
	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 12)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 13)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 14)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 16)

	else           reduce using rule 9
	'+'            shift, and enter state 43
	'-'            shift, and enter state 44
	'*'            shift, and enter state 45
	'/'            shift, and enter state 46
	'^'            shift, and enter state 47
	';'            reduce using rule 9
	%eof           reduce using rule 9


State 53

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 12)
	ExpCalc -> ExpCalc '^' ExpCalc .                    (rule 12)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 13)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 14)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 16)

	then           reduce using rule 12
	else           reduce using rule 12
	'&&'           reduce using rule 12
	'||'           reduce using rule 12
	'<'            reduce using rule 12
	'>'            reduce using rule 12
	'=='           reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'/'            reduce using rule 12
	'^'            reduce using rule 12
	';'            reduce using rule 12
	')'            reduce using rule 12
	%eof           reduce using rule 12


State 54

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 12)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 13)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 14)
	ExpCalc -> ExpCalc '/' ExpCalc .                    (rule 14)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 16)

	then           reduce using rule 14
	else           reduce using rule 14
	'&&'           reduce using rule 14
	'||'           reduce using rule 14
	'<'            reduce using rule 14
	'>'            reduce using rule 14
	'=='           reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	'/'            reduce using rule 14
	'^'            reduce using rule 14
	';'            reduce using rule 14
	')'            reduce using rule 14
	%eof           reduce using rule 14


State 55

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 12)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 13)
	ExpCalc -> ExpCalc '*' ExpCalc .                    (rule 13)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 14)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 16)

	then           reduce using rule 13
	else           reduce using rule 13
	'&&'           reduce using rule 13
	'||'           reduce using rule 13
	'<'            reduce using rule 13
	'>'            reduce using rule 13
	'=='           reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'/'            reduce using rule 13
	'^'            reduce using rule 13
	';'            reduce using rule 13
	')'            reduce using rule 13
	%eof           reduce using rule 13


State 56

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 12)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 13)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 14)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 16)
	ExpCalc -> ExpCalc '-' ExpCalc .                    (rule 16)

	then           reduce using rule 16
	else           reduce using rule 16
	'&&'           reduce using rule 16
	'||'           reduce using rule 16
	'<'            reduce using rule 16
	'>'            reduce using rule 16
	'=='           reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            shift, and enter state 45
	'/'            shift, and enter state 46
	'^'            shift, and enter state 47
	';'            reduce using rule 16
	')'            reduce using rule 16
	%eof           reduce using rule 16


State 57

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 12)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 13)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 14)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc '+' ExpCalc .                    (rule 15)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 16)

	then           reduce using rule 15
	else           reduce using rule 15
	'&&'           reduce using rule 15
	'||'           reduce using rule 15
	'<'            reduce using rule 15
	'>'            reduce using rule 15
	'=='           reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            shift, and enter state 45
	'/'            shift, and enter state 46
	'^'            shift, and enter state 47
	';'            reduce using rule 15
	')'            reduce using rule 15
	%eof           reduce using rule 15


State 58

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 12)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 13)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 14)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 16)
	ExpBool -> ExpCalc '==' ExpCalc .                   (rule 25)

	then           reduce using rule 25
	'&&'           reduce using rule 25
	'||'           reduce using rule 25
	'+'            shift, and enter state 43
	'-'            shift, and enter state 44
	'*'            shift, and enter state 45
	'/'            shift, and enter state 46
	'^'            shift, and enter state 47
	')'            reduce using rule 25


State 59

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 12)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 13)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 14)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 16)
	ExpBool -> ExpCalc '>' ExpCalc .                    (rule 24)

	then           reduce using rule 24
	'&&'           reduce using rule 24
	'||'           reduce using rule 24
	'+'            shift, and enter state 43
	'-'            shift, and enter state 44
	'*'            shift, and enter state 45
	'/'            shift, and enter state 46
	'^'            shift, and enter state 47
	')'            reduce using rule 24


State 60

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 12)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 13)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 14)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 16)
	ExpBool -> ExpCalc '<' ExpCalc .                    (rule 23)

	then           reduce using rule 23
	'&&'           reduce using rule 23
	'||'           reduce using rule 23
	'+'            shift, and enter state 43
	'-'            shift, and enter state 44
	'*'            shift, and enter state 45
	'/'            shift, and enter state 46
	'^'            shift, and enter state 47
	')'            reduce using rule 23


State 61

	ExpBool -> ExpBool . '&&' ExpBool                   (rule 20)
	ExpBool -> ExpBool . '||' ExpBool                   (rule 21)
	ExpBool -> ExpBool '||' ExpBool .                   (rule 21)

	then           reduce using rule 21
	'&&'           reduce using rule 21
	'||'           reduce using rule 21
	')'            reduce using rule 21


State 62

	ExpBool -> ExpBool . '&&' ExpBool                   (rule 20)
	ExpBool -> ExpBool '&&' ExpBool .                   (rule 20)
	ExpBool -> ExpBool . '||' ExpBool                   (rule 21)

	then           reduce using rule 20
	'&&'           reduce using rule 20
	'||'           reduce using rule 20
	')'            reduce using rule 20


State 63

	Exp -> Exp . ';' Exp                                (rule 10)
	Exp -> if ExpBool then Exp . else Exp               (rule 11)

	else           shift, and enter state 67
	';'            shift, and enter state 29


State 64

	ExpBool -> '(' ExpBool ')' .                        (rule 28)

	then           reduce using rule 28
	'&&'           reduce using rule 28
	'||'           reduce using rule 28
	')'            reduce using rule 28


State 65

	ExpCalc -> '(' ExpCalc ')' .                        (rule 19)

	then           reduce using rule 19
	else           reduce using rule 19
	'&&'           reduce using rule 19
	'||'           reduce using rule 19
	'<'            reduce using rule 19
	'>'            reduce using rule 19
	'=='           reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            reduce using rule 19
	'/'            reduce using rule 19
	'^'            reduce using rule 19
	';'            reduce using rule 19
	')'            reduce using rule 19
	%eof           reduce using rule 19


State 66

	ExpCalc -> ExpCalc . '^' ExpCalc                    (rule 12)
	ExpCalc -> ExpCalc . '*' ExpCalc                    (rule 13)
	ExpCalc -> ExpCalc . '/' ExpCalc                    (rule 14)
	ExpCalc -> ExpCalc . '+' ExpCalc                    (rule 15)
	ExpCalc -> ExpCalc . '-' ExpCalc                    (rule 16)
	ExpCalc -> '(' ExpCalc . ')'                        (rule 19)

	'+'            shift, and enter state 43
	'-'            shift, and enter state 44
	'*'            shift, and enter state 45
	'/'            shift, and enter state 46
	'^'            shift, and enter state 47
	')'            shift, and enter state 65


State 67

	Exp -> if ExpBool then Exp else . Exp               (rule 11)

	if             shift, and enter state 4
	let            shift, and enter state 5
	REVERSE        shift, and enter state 6
	ROTATE         shift, and enter state 7
	BLANK          shift, and enter state 8
	LOAD           shift, and enter state 9
	SCALE          shift, and enter state 10
	PRINT          shift, and enter state 11
	CREATECANVAS   shift, and enter state 2
	SUBTITLE       shift, and enter state 12

	Exp            goto state 68

State 68

	Exp -> Exp . ';' Exp                                (rule 10)
	Exp -> if ExpBool then Exp else Exp .               (rule 11)

	else           reduce using rule 11
	';'            shift, and enter state 29
	%eof           reduce using rule 11


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 29
Number of terminals: 31
Number of non-terminals: 4
Number of states: 69
